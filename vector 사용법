<vector의 사용법 및 정의>
-C++의 클래스 라이브러리. 동적 배열.
-사용 예제
#include <iostream>
#include <vector> // vector를 사용하기 위해 필요한 헤더 파일

using namespace std;

int main() {
    vector<int> v; // 정수형 벡터 v 생성

    // 벡터에 원소 추가
    v.push_back(1);
    v.push_back(2);
    v.push_back(3);

    // 벡터의 크기와 원소 출력
    cout << "Vector size: " << v.size() << endl;
    for (int i = 0; i < v.size(); i++) {
        cout << "v[" << i << "] = " << v[i] << endl;
    }

    return 0;
}

*코드 설명
vector<int> v;: 정수를 저장할 수 있는 빈 벡터 v를 생성합니다.
v.push_back(1);: 벡터 v의 끝에 정수 1을 추가합니다. 이와 같은 방법으로 2와 3도 추가됩니다.
v.size(): 벡터 v의 현재 크기(원소의 개수)를 반환합니다.
v[i]: 배열처럼 인덱스를 사용해 벡터의 원소에 접근합니다.

2차원 벡터 행렬 구현 코드 예시 
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int rows = 3, cols = 4;

    // 2차원 벡터 생성 (3x4 행렬)
    vector<vector<int>> matrix(rows, vector<int>(cols, 0));

    // 행렬의 원소에 접근 및 수정
    matrix[1][2] = 5;

    // 행렬 출력
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


벡터는 C++에서 매우 강력하고 유연한 데이터 구조로, 다양한 방식으로 응용할 수 있습니다. 동적 배열의 역할을 하며, 데이터의 추가, 제거, 검색 등을 효율적으로 수행할 수 있습니다.








